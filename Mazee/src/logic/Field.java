package logic;

import java.awt.Graphics2D;

import render.IRenderable;
import render.Resource;

public class Field implements IRenderable {

	private static int[][] field = {
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},
			{-1,0,0,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1},
			{-1,0,-1,-1,-1,-1,-1,0,-1,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,0,-1},
			{-1,0,-1,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,-1,0,-1,0,0,0,-1,0,-1},
			{-1,0,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,-1,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,0,-1},
			{-1,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,-1,0,-1,0,-1,0,0,0,-1,0,0,0,-1,0,-1},
			{-1,0,-1,-1,-1,-1,-1,-1,-1,0,-1,0,-1,-1,-1,-1,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,-1,-1},
			{-1,0,0,0,0,0,-1,0,-1,0,-1,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,-1,0,0,0,-1},
			{-1,-1,-1,-1,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1},
			{-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1},
			{-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,0,-1,0,-1,0,-1,-1,-1},
			{-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1},
			{-1,-1,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,-1,-1,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1},
			{-1,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,-1},
			{-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,-1,-1,0,-1,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1},
			{-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1},
			{-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,0,-1,-1,-1,-1,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,-1,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,0,-1},
			{-1,0,0,0,-1,0,0,0,-1,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,-1,0,-1},
			{-1,0,-1,-1,-1,-1,-1,0,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,-1,-1,0,-1,0,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,0,-1,0,-1,0,-1},
			{-1,0,0,0,-1,0,0,0,-1,0,-1,0,-1,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,-1,0,-1,0,-1},
			{-1,0,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,-1,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,0,-1,0,-1},
			{-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,-1},
			{-1,-1,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1},
			{-1,0,0,0,-1,0,-1,0,-1,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1},
			{-1,-1,-1,-1,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,-1,-1,0,-1,0,-1,-1,-1},
			{-1,0,0,0,-1,0,-1,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,-1,0,-1,0,-1,0,0,0,-1,0,-1,0,-1,0,-1},
			{-1,0,-1,0,-1,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,0,-1},
			{-1,0,-1,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,-1},
			{-1,0,-1,0,-1,0,-1,0,-1,-1,-1,-1,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,0,-1,0,-1,0,-1},
			{-1,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,-1,0,-1},
			{-1,0,-1,0,-1,0,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,0,-1,0,-1},
			{-1,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1},
			{-1,0,-1,-1,-1,0,0,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,0,-1,-1,-1,0,-1},
			{-1,0,0,0,-1,0,0,0,0,0,-1,0,-1,0,0,0,-1,0,0,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,-1},
			{-1,0,-1,0,-1,-1,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,-1,-1,-1,-1,0,-1,0,-1},
			{-1,0,-1,0,-1,0,0,0,-1,0,-1,0,0,0,-1,0,-1,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,0,0,0,0,-1,0,-1,0,-1},
			{-1,-1,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,0,-1},
			{-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,-1,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,0,0,0,0,-1,0,0,0,-1,0,-1},
			{-1,0,-1,-1,-1,-1,-1,0,-1,-1,-1,0,-1,0,-1,0,-1,-1,-1,0,-1,-1,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,0,-1,0,-1,-1,-1,0,-1},
			{-1,0,0,0,0,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,0,0,-1,0,0,0,-1,0,0,0,-1,0,0,0,-1},
			{-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,0,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1,-1},

	};

	public int getTerrain(int x, int y) {
		if (x < 0 || x >= field[0].length || y < 0 || y >= field.length)
			return -3;
		return field[y][x];
	}

	public int getTileIndex(int x, int y) {
		int terrain = getTerrain(x, y);
		if (terrain <= 0 && terrain >= -1)
			return -terrain;
		else
			return 0;
	}

	@Override
	public int getZ() {
		return -9999;
	}

	@Override
	public void draw(Graphics2D g2d) {

		for (int x = 0; x < field[0].length; x++) {
			for (int y = 0; y < field.length; y++) {
				g2d.drawImage(Resource.mapSprite.getSubimage(getTileIndex(x, y)*24, 0, 24, 24), null, x * 24, y * 24);
			}
		}

	}

	@Override
	public boolean isVisible() {
		// TODO Auto-generated method stub
		return true;
	}
}
